package pie.nature;

import java.util.List;

import android.content.Context;
import android.graphics.Color;
import android.view.Display;
import android.view.Gravity;
import android.view.WindowManager;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.ScrollView;

public class MainLayout extends ScrollView {

	private Context context;
	private TileImage[][] tiles;
	private RelativeLayout layout;

	private int numberRows;
	private int numberColumns;
	private int numberAll;
	private int valueWidth;
	private int valueHeight;
	private int valueMargin;

	private List<Item> items;

	public MainLayout(Context context) {
		super(context);
		this.context = context;
	}

	public void create() {
		initVars();
		initLayouts();
		initViews();
	}

	private void initVars() {
		numberColumns = 5;
		if (numberAll % numberColumns != 0)
			numberRows = numberAll / numberColumns + 1;
		else
			numberRows = numberAll / numberColumns;

		WindowManager wm = (WindowManager) context
				.getSystemService(Context.WINDOW_SERVICE);
		Display display = wm.getDefaultDisplay();
		valueWidth = display.getWidth() / numberColumns;
		valueHeight = valueWidth;
		valueMargin = valueWidth / 10;
	}

	private void initLayouts() {

		layout = new RelativeLayout(context);
		layout.setBackgroundColor(Color.GRAY);
		layoutRelative.setGravity(Gravity.CENTER_HORIZONTAL);
		RelativeLayout.LayoutParams rllp = new RelativeLayout.LayoutParams(
				RelativeLayout.LayoutParams.FILL_PARENT,
				RelativeLayout.LayoutParams.WRAP_CONTENT);

		this.setLayoutParams(new LinearLayout.LayoutParams(
				LinearLayout.LayoutParams.FILL_PARENT,
				LinearLayout.LayoutParams.FILL_PARENT));
		this.addView(layoutRelative, rllp);
		this.setBackgroundColor(colorBase);

	}

	private void initViews() {

		TileImage.setColorBaseTouch(colorBase, colorTouch);
		if (colorBase == ResStorage.COLOR_THEME7A)
			TileImage.setColorText(Color.WHITE);
		else
			TileImage.setColorText(Color.BLACK);
		TileImage.setValueWidth(valueWidth);
		TileImage.setValueHeight(valueHeight);
		TileImage.setValueMargins(valueMargins);
		TileImage.setSizeText(valueMargins);
		icons = new TileImage[numberColumns][numberRows];

		int k = 0;
		for (int i = 0; i < numberRows; i++)
			for (int j = 0; j < numberColumns; j++) {

				colorTile = colorBase;
				int randomValue = createRandomVariation(j, i);
				colorVariation[j][i] = randomValue;
				colorTile = Color.argb(Color.alpha(colorBase),
						Color.red(colorBase) + randomValue,
						Color.green(colorBase) + randomValue,
						Color.blue(colorBase) + randomValue);
				icons[j][i] = new TileImage(context);
				icons[j][i].setColorTile(colorTile);
				icons[j][i].setId(i * numberColumns + j);
				RelativeLayout.LayoutParams rllp = new RelativeLayout.LayoutParams(
						valueWidth, valueHeight);
				rllp.setMargins(j * valueWidth, i * valueHeight, 0, 0);
				layoutRelative.addView(icons[j][i], rllp);

				if (k < filesToDisplay.length & k < maxTasks) {
					loadBitmap(k, j, i);
					k++;
				}
			}
	}

	public List<Item> getItems() {
		return items;
	}

	public void setItems(List<Item> items) {
		this.items = items;
		numberAll = items.size();
	}

	public TileImage[][] getTiles() {
		return tiles;
	}

}
